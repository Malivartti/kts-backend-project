
services:
  postgres:
    image: postgres:17
    container_name: sgg_postgres
    restart: always
    ports:
      - 1235:5432
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"] 
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    container_name: sgg_rabbitmq
    restart: always
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    command: >
      bash -c "
        chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie || true;
        chmod 400 /var/lib/rabbitmq/.erlang.cookie || true;
        rabbitmq-server
      "
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  nginx:
    build:
      context: ./nginx
    container_name: sgg_nginx
    image: ghcr.io/${GITHUB_REPOSITORY}/nginx:${DOCKER_TAG}
    restart: always
    ports:
      - 80:80
    depends_on:
      public_worker:
        condition: service_started

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx_status"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus
    container_name: sgg_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
  
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sgg_node_exporter

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: sgg_postgres_exporter
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env

  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: sgg_nginx_prometheus_exporter
    command:
      - --nginx.scrape-uri=http://nginx/nginx_status
    depends_on:
      nginx:
        condition: service_healthy

  grafana:
    image: grafana/grafana
    container_name: sgg_grafana
    ports:
      - 3002:3000
    env_file:
      - .env
    volumes:
      - grafana-storage:/var/lib/grafana

  poller:
    build:
      context: ./poller
    image: ghcr.io/${GITHUB_REPOSITORY}/poller:${DOCKER_TAG}
    container_name: sgg_poller
    restart: always
    working_dir: /app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy

  public_worker:
    build:
      context: ./worker
    image: ghcr.io/${GITHUB_REPOSITORY}/worker:${DOCKER_TAG}
    container_name: sgg_worker
    restart: always
    working_dir: /app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  worker:
    build:
      context: ./worker
    image: ghcr.io/${GITHUB_REPOSITORY}/worker:${DOCKER_TAG}
    restart: always
    working_dir: /app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 3

volumes:
  postgres_data:
  rabbitmq_data:
  grafana-storage:
