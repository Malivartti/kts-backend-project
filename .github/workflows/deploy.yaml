name: Build, Push and Deploy

on:
  push:
    branches: ['main']
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  TAG_NAME: ${{ github.event.inputs.version || 'latest' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set repository name to lowercase
        run: echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Check for changes in poller
        id: check_poller
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "^poller/" && echo "changed=true" >> $GITHUB_OUTPUT || echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes in worker
        id: check_worker
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "^worker/" && echo "changed=true" >> $GITHUB_OUTPUT || echo "changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for changes in nginx
        id: check_nginx
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "^nginx/" && echo "changed=true" >> $GITHUB_OUTPUT || echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Использование metadata-action для Poller
      - name: Docker meta for Poller
        id: meta_poller
        if: steps.check_poller.outputs.changed == 'true'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/poller
          tags: ${{ env.TAG_NAME }}

      # Сборка и публикация образа poller только если были изменения
      - name: Build and push Poller image
        if: steps.check_poller.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./poller
          push: true
          tags: ${{ steps.meta_poller.outputs.tags }}

      # Использование metadata-action для Worker
      - name: Docker meta for Worker
        id: meta_worker
        if: steps.check_worker.outputs.changed == 'true'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/worker
          tags: ${{ env.TAG_NAME }}

      # Сборка и публикация образа worker только если были изменения
      - name: Build and push Worker image
        if: steps.check_worker.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./worker
          push: true
          tags: ${{ steps.meta_worker.outputs.tags }}
          
      # Использование metadata-action для Nginx
      - name: Docker meta for Nginx
        id: meta_nginx
        if: steps.check_nginx.outputs.changed == 'true'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/nginx
          tags: ${{ env.TAG_NAME }}

      # Сборка и публикация образа nginx только если были изменения
      - name: Build and push Nginx image
        if: steps.check_nginx.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: ${{ steps.meta_nginx.outputs.tags }}
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set repository name to lowercase
        run: echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Check for any changes in code
        id: check_code_changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -E "^(poller|worker|nginx)/" && echo "changed=true" >> $GITHUB_OUTPUT || echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Set re-run flag
        id: rerun_check
        run: echo "is_rerun=true" >> $GITHUB_OUTPUT
      
      - name: Create .env file
        run: |
          cat > .env << EOF
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          TG_BOT_TOKEN=${{ secrets.TG_BOT_TOKEN }}
          RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
          RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
          RABBITMQ_HOST=rabbitmq
          DOCKER_TAG=${{ env.TAG_NAME }}
          EOF
      
      - name: Update docker-compose.yml
        run: |
          sed -i "s|image: .*poller.*|image: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/poller:${{ env.TAG_NAME }}|g" docker-compose.yaml
          sed -i "s|image: .*worker.*|image: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/worker:${{ env.TAG_NAME }}|g" docker-compose.yaml
          sed -i "s|image: .*nginx.*|image: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/nginx:${{ env.TAG_NAME }}|g" docker-compose.yaml
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Create Docker config directory
        if: steps.check_code_changes.outputs.changed == 'true' || steps.rerun_check.outputs.is_rerun == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ~/.docker"

      - name: Setup Docker authentication on server
        if: steps.check_code_changes.outputs.changed == 'true' || steps.rerun_check.outputs.is_rerun == 'true'
        run: |
          # Создаем файл конфигурации Docker с авторизацией для GitHub Container Registry
          cat > docker_config.json << EOF
          {
            "auths": {
              "${REGISTRY}": {
                "auth": "$(echo -n ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} | base64)"
              }
            }
          }
          EOF
          
          # Копируем файл конфигурации на сервер
          scp -o StrictHostKeyChecking=no docker_config.json ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/.docker/config.json
          
          # Проверяем авторизацию
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker login ${REGISTRY} -u ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}"
      
      - name: Deploy to server
        if: steps.check_code_changes.outputs.changed == 'true' || steps.rerun_check.outputs.is_rerun == 'true'
        run: |
          # Создаем директорию, если она не существует
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.SSH_TARGET_DIR }}"
          
          # Копируем docker-compose.yaml и .env файл
          scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_TARGET_DIR }}/
          scp -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_TARGET_DIR }}/
          
          # Запускаем docker-compose
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.SSH_TARGET_DIR }} && docker-compose pull && docker-compose up -d"